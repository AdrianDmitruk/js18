// Задача 1

// Напишите функцию sayHello, которая выводит в консоль
// приветствие "Привет, мир!".

const sayHello = () => console.log("Привет, мир!");

sayHello();

// ----------------------------------------------------

// Задача 2

// Реализуйте функцию getSquare, которая принимает число и
// возвращает его квадрат.

const getSquare = (number) => number * number;

console.log(getSquare(4));

// ----------------------------------------------------

// Задача 3

// Напишите функцию isEven, которая принимает число и возвращает
// true, если число четное, и false в противном случае.

const isEven = (number) => (number % 2 ? false : true);

console.log(isEven(12));

// ----------------------------------------------------

// Задача 4

// Реализуйте функцию getGreeting, которая принимает имя и возвращает
// приветствие с использованием этого имени.

const getGreeting = (name) => `${name} привет!`;

console.log(getGreeting("Адриан"));

// ----------------------------------------------------

// Задача 5

// Напишите функцию calculateDiff, которая принимает два числа
// и возвращает их разность.

const calculateDiff = (numFirst, numSecond) => numFirst - numSecond;

console.log(calculateDiff(4, 1));

// ----------------------------------------------------

// Задача 6

// Реализуйте функцию applyDiscount, которая принимает исходную цену
// товара и процент скидки, и возвращает цену товара после
// применения скидки.

const applyDiscount = (prise, discount) => {
  const discountAmount = (prise * discount) / 100;
  return prise - discountAmount;
};

console.log(applyDiscount(200, 10));

// ----------------------------------------------------

// Задача 7

// Напишите функцию delayedGreeting, которая принимает задержку
// (в миллисекундах) и колбэк-приветствие. Функция должна
// вызвать переданный колбэк с некоторым приветствием через
// указанную задержку.

const delayedGreeting = (delay, cb) => {
  setTimeout(() => {
    cb("Привет");
  }, delay);
};

const greet = (message) => {
  console.log(message);
};

delayedGreeting(5000, greet);

// ----------------------------------------------------

// Задача 8

// Реализуйте функцию debounce, которая принимает функцию в
// качестве аргумента и возвращает новую функцию, которая
// вызывает исходную функцию только после того, как прошло
// определенное время без вызовов.

// ----------------------------------------------------

// Задача 9

// Реализуйте функцию filter, которая принимает массив чисел и
// колбэк-условие, возвращая новый массив, содержащий только те
// числа, для которых переданное условие истинно.

const numbers = [1, 2, 3, 4, 5, 6];

const filter = (array, terms) => {
  return array.filter((item) => terms(item));
};

const maxNumber = filter(numbers, (item) => item === Math.max(...numbers));
console.log(maxNumber);

// ----------------------------------------------------

// Задача 10

// Напишите собственный простой калькулятор. Интерфейс должен
// принимать математическое выражение (в prompt), результат
// его вычисления выводить через функцию eval (о ней подробнее
//   попробуйте найти информацию самостоятельно или ознакомьтесь
//   по ссылке).

// Есть некоторые правила:

// некорректные значения считаются
// ошибкой (например, если было введено 2+*3)

// так же ошибка выводится если результат
// возвращение равно nan или же undefined

// стоит помнить правило, что на ноль делить нельзя

// Ошибки рекомендуется отлавливать конструкцией (try..catch)

const calculator = () => {
  try {
    const expression = prompt("Введите математическое выражение:");

    const result = eval(expression);

    if (isNaN(result) || result === undefined) {
      throw new Error(
        "Ошибка: результат возвращение равно nan или же undefined."
      );
    }

    if (!isFinite(result)) {
      throw new Error("Ошибка: делить на 0 нельзя");
    }

    alert(`Результат: ${result}`);
  } catch (error) {
    alert("Ошибка");
  }
};

calculator();
