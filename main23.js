// Лёгкий уровень

// Задача 1

// Напишите рекурсивную функцию factorial, которая принимает число
// в качестве аргумента и возвращает его факториал. Факториал числа
// n (обозначается как n!) - это произведение всех натуральных чисел
// от 1 до n.

const factorial = (n) => {
  if (n === 0 || n === 1) {
    return 1;
  } else {
    return n * factorial(n - 1);
  }
};

console.log(factorial(5));

//------------------------------------------------------------------

// Задача 2

// Напишите рекурсивную функцию, которая принимает число и возвращает
// сумму всех нечетных чисел из промежутка до этого числа включительно.

const sum = (n) => {
  if (n === 0) {
    return 0;
  } else if (n % 2 === 0) {
    return sum(n - 1);
  } else {
    return n + sum(n - 1);
  }
};

console.log(sum(10));

//------------------------------------------------------------------

// Средний уровень

// Задача 1

// Напишите рекурсивную функцию fibonacci, которая принимает неотрицательное
// целое число n в качестве аргумента и возвращает n-ое число в
// последовательности Фибоначчи.
// Последовательность Фибоначчи начинается с чисел 0 и 1, а каждое
// последующее число равно сумме двух предыдущих чисел. Например, первые 10
// чисел последовательности Фибоначчи: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34.

const fibonacci = (n) => {
  if (n === 0) {
    return 0;
  } else if (n === 1) {
    return 1;
  } else {
    return fibonacci(n - 1) + fibonacci(n - 2);
  }
};

console.log(fibonacci(4));

//------------------------------------------------------------------

// Задача 2

// Напишите рекурсивную функцию isPalindrome, которая принимает строку
// в качестве аргумента и проверяет, является ли она палиндромом.
// Палиндром - это слово или фраза, которые одинаково читаются слева
// направо и справа налево, игнорируя пробелы, знаки препинания и
// регистр символов. Например, "level", "madam" и "A man, a plan, a canal: Panama!"
// являются палиндромами.

const palindrome = (str) => {
  if (str.length === 0) {
    return true;
  }
  if (str[0] !== str[str.length - 1]) {
    return false;
  }
  return palindrome(str.slice(1, str.length - 1));
};

console.log(palindrome("madam"));

//------------------------------------------------------------------

// Задача 3

// Напишите рекурсивную функцию flattenArray, которая принимает массив,
// содержащий вложенные массивы, и возвращает одномерный массив, в котором
// все элементы расположены последовательно.
// Например, для массива [1, [2, [3, 4], 5], 6] функция должна
// вернуть [1, 2, 3, 4, 5, 6].
// Для решения этой задачи нельзя использовать метод flat().

const extractArr = (arr) => {
  let result = [];
  for (let i = 0; i < arr.length; i++) {
    if (Array.isArray(arr[i])) {
      result = result.concat(extractArr(arr[i]));
    } else {
      result.push(arr[i]);
    }
  }

  return result;
};

console.log(extractArr([1, [2, [3, 4], 5], 6]));

//------------------------------------------------------------------

// Задача 4

// Напишите рекурсивную функцию findMax, которая принимает массив чисел и
// возвращает максимальное число из этого массива. Функция должна
// использовать рекурсию для обхода всех элементов массива и сравнения их
// со значением максимального числа.

const findMax = (arr) => {
  if (arr.length === 1) {
    return arr[0];
  } else {
    const muxNumber = findMax(arr.slice(1));
    return arr[0] > muxNumber ? arr[0] : muxNumber;
  }
};

console.log(findMax([3, 9, 19]));
